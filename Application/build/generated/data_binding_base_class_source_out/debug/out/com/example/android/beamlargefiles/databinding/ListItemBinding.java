// Generated by view binder compiler. Do not edit!
package com.example.android.beamlargefiles.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.example.android.beamlargefiles.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView checkItem;

  @NonNull
  public final LinearLayout relativeLayout;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView tvACno;

  @NonNull
  public final TextView tvAddress;

  @NonNull
  public final TextView tvAmount;

  @NonNull
  public final TextView tvAmountLastDate;

  @NonNull
  public final TextView tvAmountSub;

  @NonNull
  public final TextView tvMobileNo;

  private ListItemBinding(@NonNull LinearLayout rootView, @NonNull ImageView checkItem,
      @NonNull LinearLayout relativeLayout, @NonNull TextView textView, @NonNull TextView tvACno,
      @NonNull TextView tvAddress, @NonNull TextView tvAmount, @NonNull TextView tvAmountLastDate,
      @NonNull TextView tvAmountSub, @NonNull TextView tvMobileNo) {
    this.rootView = rootView;
    this.checkItem = checkItem;
    this.relativeLayout = relativeLayout;
    this.textView = textView;
    this.tvACno = tvACno;
    this.tvAddress = tvAddress;
    this.tvAmount = tvAmount;
    this.tvAmountLastDate = tvAmountLastDate;
    this.tvAmountSub = tvAmountSub;
    this.tvMobileNo = tvMobileNo;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.checkItem;
      ImageView checkItem = rootView.findViewById(id);
      if (checkItem == null) {
        break missingId;
      }

      LinearLayout relativeLayout = (LinearLayout) rootView;

      id = R.id.textView;
      TextView textView = rootView.findViewById(id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.tvACno;
      TextView tvACno = rootView.findViewById(id);
      if (tvACno == null) {
        break missingId;
      }

      id = R.id.tvAddress;
      TextView tvAddress = rootView.findViewById(id);
      if (tvAddress == null) {
        break missingId;
      }

      id = R.id.tvAmount;
      TextView tvAmount = rootView.findViewById(id);
      if (tvAmount == null) {
        break missingId;
      }

      id = R.id.tvAmountLastDate;
      TextView tvAmountLastDate = rootView.findViewById(id);
      if (tvAmountLastDate == null) {
        break missingId;
      }

      id = R.id.tvAmountSub;
      TextView tvAmountSub = rootView.findViewById(id);
      if (tvAmountSub == null) {
        break missingId;
      }

      id = R.id.tvMobileNo;
      TextView tvMobileNo = rootView.findViewById(id);
      if (tvMobileNo == null) {
        break missingId;
      }

      return new ListItemBinding((LinearLayout) rootView, checkItem, relativeLayout, textView,
          tvACno, tvAddress, tvAmount, tvAmountLastDate, tvAmountSub, tvMobileNo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
