// Generated by view binder compiler. Do not edit!
package com.example.android.beamlargefiles.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.example.android.beamlargefiles.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CustomviewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonOk;

  @NonNull
  public final Button buttonSms;

  @NonNull
  public final EditText etAmount;

  @NonNull
  public final EditText etComment;

  @NonNull
  public final TextView tvAmount;

  private CustomviewBinding(@NonNull LinearLayout rootView, @NonNull Button buttonOk,
      @NonNull Button buttonSms, @NonNull EditText etAmount, @NonNull EditText etComment,
      @NonNull TextView tvAmount) {
    this.rootView = rootView;
    this.buttonOk = buttonOk;
    this.buttonSms = buttonSms;
    this.etAmount = etAmount;
    this.etComment = etComment;
    this.tvAmount = tvAmount;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomviewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomviewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.customview, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomviewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonOk;
      Button buttonOk = rootView.findViewById(id);
      if (buttonOk == null) {
        break missingId;
      }

      id = R.id.buttonSms;
      Button buttonSms = rootView.findViewById(id);
      if (buttonSms == null) {
        break missingId;
      }

      id = R.id.etAmount;
      EditText etAmount = rootView.findViewById(id);
      if (etAmount == null) {
        break missingId;
      }

      id = R.id.etComment;
      EditText etComment = rootView.findViewById(id);
      if (etComment == null) {
        break missingId;
      }

      id = R.id.tvAmount;
      TextView tvAmount = rootView.findViewById(id);
      if (tvAmount == null) {
        break missingId;
      }

      return new CustomviewBinding((LinearLayout) rootView, buttonOk, buttonSms, etAmount,
          etComment, tvAmount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
